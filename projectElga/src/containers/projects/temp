import React, { Component } from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";
import Header from "../../components/multicellular/discover/header";
import {
  View,
  ScrollView,
  Text,
  TouchableWithoutFeedback,
  Modal,
} from "react-native";
import { BottomSheetModalProvider } from "@gorhom/bottom-sheet";
import { connect, useSelector } from "react-redux";
import NothingHere from "../../components/multicellular/general/nothingHere/nothingHere";
import { withNavigation } from "react-navigation";
import BottomNavBar from "../../components/multicellular/general/bottomNavBar/bottomNavBar";
import { Icon } from "react-native-elements";
import styles from "./Style";
import { RFValue } from "react-native-responsive-fontsize";
import COLORS from "../../themes/colors";
import PendingCard from "../../components/multicellular/project/pendingCard";
import OnGoingCard from "../../components/multicellular/project/OngoingCard";
import SearchBarWithFilter from "../../components/multicellular/general/searchBar";
import ProjectFilter from "../../components/multicellular/profile/ProjectFilter/filter";
import ComingSoonCard from "../../components/multicellular/general/comingSoon";
import IMAGES from "../../themes/Images";
import STRINGS from "../../constants/Strings";
import { projectTypes } from "../../reducers/projects/projects";
import Skeleton from "../../components/multicellular/general/skeleton/skeleton";
import { projectActionTypes } from "../../reducers/projects/projectAction";
import SnackBar from "../../components/unicellular/snackbar";
import SvgUri from "expo-svg-uri";
import SVGS from "../../constants/SvgUri";
import UserList from "../chat/UserList";
import Chat from "../chat";
import STORAGE_KEY from "../../constants/StorageKeys";
import ChatRoom from "../chat/ChatRoom";
import { circleTypes } from "../../reducers/projects/circle";
import UserCard from "../../components/multicellular/general/userCard";
import ProfileButton from "../../components/multicellular/profile/button/profileButton";
import { Image } from "react-native";
import { savedTypes } from "../../reducers/saved/saved";
import PushNotification from "../../components/multicellular/notification";
import decodeToken from "../../utils/decodeToken";
import ENUM from "../../constants/Enum";
class Projects extends Component {
  constructor() {
    super();
    this.state = {
      categories: [
        { title: "Ongoing", value: 0 },
        { title: "Pending", value: 1 },
        { title: "Sent", value: 2 },
        { title: "Circle", value: 3 },
      ],
      actionMenuVisible: false,
      activeTab: 0,
      nearMe: 0,
      circleRequestVisible: false,
      comingSoonVisible: true,
      isChatActive: true,
      showWithdrawModal: false,
      withdrawValue: null,
      showUncircleModal: false,
      deleteId: "",
      notification: "",
      searchText: undefined,
      activeSection: "Projects",
    };
  }
  async callApiForProject(tab) {
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    if (tab === 0) {
      this.props.callprojectApi(
        userId,
        tokenDetail,
        ENUM.ONGOING,
        this.state.searchText
      );
    }
    if (tab === 1) {
      this.props.callprojectApi(
        userId,
        tokenDetail,
        ENUM.PENDING,
        this.state.searchText
      );
    }
    if (tab === 2) {
      this.props.callprojectApi(
        userId,
        tokenDetail,
        ENUM.SENT,
        this.state.searchText
      );
    }
    if (tab === 3) {
      if (this.state.searchText !== "") {
        const requestParam = {
          id: userId,
          key: this.state.searchText,
        };
        this.props.getCircleSearchApi(requestParam, tokenDetail);
      } else {
        const requestParam = {
          id: userId,
          listType: "PENDING",
        };
        this.props.getCircleApi(requestParam, tokenDetail);
      }
    }
  }
  async handleDeleteCircleRequest(requestUserId) {
    const { deleteResponse = [] } = this.props.circle;
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    const requestParam = {
      senderUserId: requestUserId,
      receiverUserId: userId,
      // userId: requestUserId,
    };
    this.props.deleteCircleApi(requestParam, tokenDetail);
    if (deleteResponse.status) {
      this.setState({
        showUncircleModal: false,
      });
    }
    //this.callApiForProject(3);
  }
  handleAcceptCircle = async (requestUserId) => {
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    const requestParam = {
      senderUserId: requestUserId.id,
      receiverUserId: userId,
      // userId: requestUserId.id,
    };
    this.props.acceptCircleApi(requestParam, tokenDetail);
  };
  handleChangeToggle(value) {
    this.setState({
      activeTab: value.value,
      comingSoonVisible: !this.state.comingSoonVisible,
    });
    this.callApiForProject(value.value);
  }
  handleInnerToggleSwitch = async () => {
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    this.props.callprojectApi(userId, tokenDetail, "ONGOING");
    this.setState({
      isChatActive: !this.state.isChatActive,
      activeSection: "Posted Opportunities",
    });
  };
  handleInnerToggleSwitchArchived = async () => {
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    // if (this.state.searchText !== "") {
    //   const requestParam = {
    //     id: userId,
    //     key: this.state.searchText,
    //   };
    //   this.props.getCircleSearchApi(requestParam, tokenDetail);
    // } else {
    const requestParam = {
      id: userId,
      listType: this.state.isChatActive ? "ACCEPTED" : ENUM.PENDING,
    };
    this.props.getCircleApi(requestParam, tokenDetail);
    // }

    this.setState({
      isChatActive: !this.state.isChatActive,
      activeSection: "My Circle",
    });
  };
  async componentDidMount() {
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const displayName = await AsyncStorage.getItem(
      STORAGE_KEY.USER_DISPLAY_NAME
    );

    const activeTab = this.props.navigation.getParam("activeTab");
    await AsyncStorage.setItem("UserId", userId);
    await AsyncStorage.setItem("UserName", displayName);

    if (activeTab) {
      this.setState({
        activeTab: activeTab,
      });
      this.callApiForProject(activeTab);
    } else {
      this.setState({
        activeTab: 0,
      });
      this.callApiForProject(0);
    }
  }
  async componentWillReceiveProps(nextProps, nextState) {
    const { acceptResponse = "", acceptSuccess } = nextProps.circle;
    const { profileData } = nextProps.profile;
    const { isAcceptSuccess, acceptData = "" } = nextProps.projectAction;

    if (acceptSuccess) {
      const expoToken = decodeToken(acceptResponse);
      PushNotification(
        expoToken,
        `${profileData?.displayName} has accepted your circle request`
      );
      this.props.resetSuccess();
    }
    if (isAcceptSuccess) {
      const expoToken = decodeToken(acceptData);
      PushNotification(
        expoToken,
        `${profileData?.displayName} has accepted your collaboration request`
      );
      this.props.callAcceptProjectResetReducer();
    }
  }
  Pageloader = () => {
    return (
      <View>
        {this.LoaderCard(0, RFValue(16, 844))}
        {this.LoaderCard(0, RFValue(16, 844), RFValue(16, 844))}
        {this.LoaderCard(0, RFValue(16, 844), RFValue(16, 844))}
        {this.LoaderCard(0, RFValue(16, 844), RFValue(16, 844))}
        {this.LoaderCard(0, RFValue(16, 844), RFValue(16, 844))}
        {this.LoaderCard(0, RFValue(16, 844), RFValue(16, 844))}
        {this.LoaderCard(0, RFValue(16, 844), RFValue(16, 844))}
      </View>
    );
  };
  fetchParticipantsImage = (array) => {
    const text = array
      ?.map(function (elem, index) {
        if (index === 0) {
          return elem.profileImageUrl;
        }
      })
      .join(",");
    return text;
  };
  fetchParticipantsSingle = (array) => {
    const text = array
      ?.map(function (elem, index) {
        if (index === 0) {
          return elem.displayName;
        }
      })
      .join(",");
    return text;
  };
  fetchParticipantsSingleId = (array) => {
    const text = array
      ?.map(function (elem, index) {
        if (index === 0) {
          return elem.id;
        }
      })
      .join(",");
    return text;
  };
  fetchParticipants = (array) => {
    const text = array
      ?.map(function (elem, index) {
        if (index < 2) {
          return elem.displayName;
        }
      })
      .join(",");
    return text;
  };
  fetchParticipantsAdditonal = (array) => {
    const text = array.length > 2 ? array.length - 2 : "";
    return text;
  };
  renderWithdrawModal = () => {
    return (
      <Modal
        visible={this.state.showWithdrawModal}
        transparent={true}
        animationType="fade"
      >
        <TouchableWithoutFeedback
          onPress={() => {
            this.setState({
              showWithdrawModal: false,
            });
          }}
        >
          <View
            style={{
              width: "100%",
              height: "100%",
              alignItems: "center",
              justifyContent: "center",
              backgroundColor: "rgba(0, 0, 0, 0.5)",
            }}
          >
            <View
              style={{
                backgroundColor: COLORS.monoWhite900,
                borderRadius: RFValue(16, 844),
                alignItems: "center",
                paddingVertical: RFValue(20, 844),
                paddingHorizontal: RFValue(20, 844),
              }}
            >
              <Image
                source={IMAGES.warningLogo}
                style={{ width: RFValue(48, 844), height: RFValue(48, 844) }}
              />
              <Text
                style={{
                  fontFamily: "Poppins_600SemiBold",
                  fontSize: RFValue(16, 844),
                  color: COLORS.monoBlack900,
                }}
              >
                Are you sure you want to withdraw?
              </Text>
              <View
                style={{
                  paddingTop: RFValue(12, 844),
                  flexDirection: "row",
                  alignItems: "center",
                  justifyContent: "space-between",
                  width: RFValue(370, 844),
                }}
              >
                <ProfileButton
                  height={RFValue(50, 844)}
                  bg={COLORS.teritiaryWarning}
                  text="Withdraw"
                  textColor={COLORS.monoWhite900}
                  width={RFValue(180, 844)}
                  onPress={() => {
                    null;
                  }}
                />
                <ProfileButton
                  height={RFValue(50, 844)}
                  bg={COLORS.monoWhite900}
                  text="Cancel"
                  textColor={COLORS.monoChatGray}
                  borderWidth={1}
                  width={RFValue(180, 844)}
                  onPress={() => {
                    null;
                  }}
                />
              </View>
            </View>
          </View>
        </TouchableWithoutFeedback>
      </Modal>
    );
  };
  handleWithdraw = async (value) => {
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    this.props.callApitoWithdrawProject(userId, tokenDetail, value.id);
  };
  SentProjectScreen = () => {
    const { loading, projectsData = [], error } = this.props.projects;
    const { withdrawloading } = this.props.projectAction;
    console.log("projectsData>>", projectsData);
    return loading ? (
      error ? (
        <NothingHere
          text="Nothing Here! Comeback later 👋"
          image={IMAGES.NoPending}
        />
      ) : (
        this.Pageloader()
      )
    ) : (
      <View style={{ height: "88%" }}>
        <ScrollView
          style={{ height: "100%" }}
          showsVerticalScrollIndicator={false}
        >
          {projectsData && projectsData?.length > 0 ? (
            projectsData?.map((value, index) => {
              return (
                <PendingCard
                  title={value.name}
                  profileName={this.fetchParticipantsSingle(value.participants)}
                  //key={index}
                  date={value?.sentOn}
                  onPress={() => {
                    this.props.navigation.navigate("PendingPage", {
                      id: value?.id,
                      isPending: false,
                      sentSection: ENUM.SENT,
                      recieverId: this.fetchParticipantsSingleId(
                        value.participants
                      ),
                    });
                  }}
                  showProfile={true}
                  image={this.fetchParticipantsImage(value.participants)}
                  mainCategory={value.type?.toLowerCase()}
                  subCategory={value.priceDetails?.entityType?.toLowerCase()}
                  subtitleText={value?.description}
                  onClickButton2={() => {
                    this.setState({
                      showWithdrawModal: true,
                    });
                    this.handleWithdraw(value);
                  }}
                  loadingButton2={withdrawloading}
                  button1="Message"
                  button2="Withdraw"
                />
              );
            })
          ) : (
            <NothingHere
              text="Nothing Here! Comeback later 👋"
              image={IMAGES.NoPending}
            />
          )}
        </ScrollView>
      </View>
    );
  };
  handleAcceptButton = async (value) => {
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);

    this.props.callApitoAcceptProject(
      userId,
      tokenDetail,
      this.fetchParticipantsSingleId(value.participants),
      value.id
    );
  };
  handleRejectButton = async (value) => {
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    this.props.callApitoRejectProject(
      userId,
      tokenDetail,
      this.fetchParticipantsSingleId(value.participants),
      value.id,
      true
    );
  };
  renderInnerToggle = (text) => {
    return (
      <View
        style={{
          width: "100%",

          flexDirection: "row",
          justifyContent: "space-between",
          alignItems: "center",
          marginTop: RFValue(12, 844),

          backgroundColor: COLORS.monoWhite900,
        }}
      >
        <TouchableWithoutFeedback
          style={{
            borderWidth: 2,
          }}
          onPress={() => {
            this.setState({
              activeSection: text[0],
            });
          }}
        >
          <View
            style={{
              width:text.length == 3 ?"33%": "50%",
              borderBottomWidth: 2,

              borderBottomColor:
                this.state.activeSection == text[0]
                  ? COLORS.primaryTeal400
                  : COLORS.monoWhite900,
              paddingVertical: RFValue(16, 844),
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <Text
              style={{
                color:
                  this.state.activeSection == text[0]
                    ? COLORS.monoBlack900
                    : COLORS.monoBlack500,
                fontSize: RFValue(14, 844),
                fontFamily: "Poppins_500Medium",
              }}
            >
              {text[0]}
            </Text>
          </View>
        </TouchableWithoutFeedback>
        <TouchableWithoutFeedback
          onPress={() => {
            this.setState({
              activeSection: text[1],
            });
          }}
        >
          <View
            style={{
              width: text.length == 3 ?"33%":"50%",
              borderBottomWidth: 2,
              borderBottomColor:
                this.state.activeSection == text[1]
                  ? COLORS.primaryTeal400
                  : COLORS.monoWhite900,

              alignItems: "center",
              justifyContent: "center",
              paddingVertical: RFValue(16, 844),
            }}
          >
            <Text
              style={{
                color:
                  this.state.activeSection == text[1]
                    ? COLORS.monoBlack900
                    : COLORS.monoBlack500,
                fontSize: RFValue(14, 844),
                fontFamily: "Poppins_500Medium",
              }}
            >
              {text[1]}
            </Text>
          </View>
        </TouchableWithoutFeedback>
        {text.length == 3 ? (
          <TouchableWithoutFeedback
            onPress={() => {
              this.setState({
                activeSection: text[2],
              });
            }}
          >
            <View
              style={{
                width:"33%",
                borderBottomWidth: 2,
                borderBottomColor:
                  this.state.activeSection == text[2]
                    ? COLORS.primaryTeal400
                    : COLORS.monoWhite900,
                paddingVertical: RFValue(16, 844),

                justifyContent: "center",
                alignItems: "center",
              }}
            >
              <Text
                style={{
                  color:
                    this.state.activeSection == text[2]
                      ? COLORS.monoBlack900
                      : COLORS.monoBlack500,
                  fontSize: RFValue(14, 844),
                  fontFamily: "Poppins_500Medium",
                }}
              >
                {text[2]}
              </Text>
            </View>
          </TouchableWithoutFeedback>
        ) : null}
      </View>
    );
  };
  PendingProjectScreen = () => {
    const { loading, projectsData = [], error } = this.props.projects;
    const { acceptloading, rejectloading } = this.props.projectAction;
    console.log("projectsData>>", projectsData);
    return loading ? (
      error ? (
        <NothingHere
          text="Nothing Here! Comeback later 👋"
          image={IMAGES.NoPending}
        />
      ) : (
        this.Pageloader()
      )
    ) : (
      <ScrollView>
        {projectsData && projectsData?.length > 0 ? (
          projectsData?.map((value, index) => {
            return (
              <PendingCard
                title={value.name}
                profileName={this.fetchParticipantsSingle(value.participants)}
                key={index}
                date={value?.sentOn}
                onPress={() => {
                  index % 2 == 0
                    ? this.props.navigation.navigate("PendingPage", {
                        id: value?.id,
                        identity: 1,
                        isPending: true,
                        sentSection: ENUM.PENDING,
                        recieverId: this.fetchParticipantsSingleId(
                          value.participants
                        ),
                      })
                    : this.props.navigation.navigate("ArchivedPage", {
                        identity: "collab",
                      });
                }}
                showProfile={true}
                image={this.fetchParticipantsImage(value.participants)}
                mainCategory={value.type?.toLowerCase()}
                subCategory={value.priceDetails?.entityType?.toLowerCase()}
                subtitleText={value?.description}
                onClickButton1={() => this.handleAcceptButton(value)}
                onClickButton2={() => this.handleRejectButton(value)}
                // loadingButton1={acceptloading}
                loadingButton2={rejectloading}
                button1="Accept"
                button2="Decline"
              />
            );
          })
        ) : (
          <NothingHere
            text="Nothing Here! Comeback later 👋"
            image={IMAGES.NoPending}
          />
        )}
      </ScrollView>
    );
  };
  LoaderCard = (borderWidth, borderRadius, marginTop) => {
    return (
      <View
        style={[
          styles.onGoingLoaderContainer,
          {
            borderBottomWidth: borderWidth ? borderWidth : 2,
            borderRadius: borderRadius,
            marginTop: marginTop,
          },
        ]}
      >
        <View>
          <Skeleton
            styles={{
              width: RFValue(64, 844),
              height: RFValue(64, 844),
              borderRadius: RFValue(36, 844),
            }}
          />
        </View>
        <View style={styles.loaderInnerView}>
          <Skeleton
            styles={{
              height: RFValue(16, 844),
              width: "100%",
              borderRadius: RFValue(12, 844),
            }}
          />
          <Skeleton
            styles={{
              marginTop: RFValue(16, 844),
              height: RFValue(16, 844),
              width: "50%",
              borderRadius: RFValue(12, 844),
            }}
          />
        </View>
      </View>
    );
  };
  OngoingLoader = () => {
    return (
      <View>
        <TouchableWithoutFeedback onPress={this.handleInnerToggleSwitch}>
          {this.renderInnerToggle(["...", "..."])}
        </TouchableWithoutFeedback>
        {this.LoaderCard()}
        {this.LoaderCard()}
        {this.LoaderCard()}
        {this.LoaderCard()}
        {this.LoaderCard()}
        {this.LoaderCard()}
        {this.LoaderCard()}
        {this.LoaderCard()}
      </View>
    );
  };

  OngoingProjectScreen = () => {
    const { loading, projectsData = [], error } = this.props.projects;
    console.log("projectsData>>", projectsData);
    return loading ? (
      error ? (
        <NothingHere
          text="Nothing Here! Comeback later 👋"
          image={IMAGES.NoPending}
        />
      ) : (
        this.OngoingLoader()
      )
    ) : (
      <View style={{ height: "100%" }}>
        <TouchableWithoutFeedback onPress={this.handleInnerToggleSwitch}>
          {this.renderInnerToggle(["Projects", "Posted Opportunities"])}
        </TouchableWithoutFeedback>
        <ScrollView
          showsVerticalScrollIndicator={false}
          style={{ backgroundColor: COLORS.monoWhite900 }}
        >
          {projectsData && projectsData?.length > 0 ? (
            <ChatRoom isChatActive={this.state.isChatActive} />
          ) : (
            // null
            <NothingHere
              text="Nothing Here! Comeback later 👋"
              image={IMAGES.NoPending}
            />
          )}
        </ScrollView>
      </View>
    );
  };
  handleIsSavedClicked = async (item) => {
    const { savedArray = [] } = this.props.saved;

    let array = savedArray;
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    const saveEntity = "USER";
    let params = {
      userId: userId,
      entityId: item.id,
      saveEntity: saveEntity,
    };
    let response = await makePostApiCall(
      URLS.API_SAVE_ENTITY(item.id),
      {},
      tokenDetail,
      params
    );
    if (typeof response.status !== "undefined" && response.status) {
      if (array.some((data) => data.id === item.id)) {
        // let index = array.indexOf(item);
        let index = array
          ?.map(function (e) {
            return e.id;
          })
          .indexOf(item?.id);
        array.splice(index, 1);
        this.props.setSavedArray([...array]);
      } else {
        array.push(item);
        this.props.setSavedArray([...array]);
      }
    } else {
      alert("error>>" + JSON.stringify(response.message));
    }
  };

  checkIsSaved = (item) => {
    const { savedArray = [] } = this.props.saved;
    return savedArray.some((data) => data.id === item.id);
  };
  uncircleModal = () => {
    return (
      <Modal
        visible={this.state.showUncircleModal}
        transparent={true}
        animationType="fade"
      >
        <TouchableWithoutFeedback
          onPress={() => {
            this.setState({
              showUncircleModal: false,
            });
          }}
        >
          <View
            style={{
              width: "100%",
              height: "100%",
              alignItems: "center",
              justifyContent: "center",
              backgroundColor: "rgba(0, 0, 0, 0.5)",
            }}
          >
            <TouchableWithoutFeedback
              onPress={() => {
                this.handleDeleteCircleRequest(this.state.deleteId);
              }}
            >
              <View
                style={{
                  width: RFValue(248, 844),
                  height: RFValue(64, 844),
                  backgroundColor: COLORS.monoWhite900,
                  borderRadius: RFValue(16, 844),
                  alignItems: "center",
                  flexDirection: "row",
                  paddingHorizontal: RFValue(20, 844),
                }}
              >
                <SvgUri
                  svgXmlData={SVGS.RED_DUSTBIN}
                  width={RFValue(24, 844)}
                  height={RFValue(24, 844)}
                />
                <Text
                  style={{
                    marginLeft: RFValue(12, 844),
                    color: COLORS.teritiaryWarning,
                    fontSize: RFValue(14, 844),
                    fontFamily: "Poppins_500Medium",
                  }}
                >
                  Uncircle
                </Text>
              </View>
            </TouchableWithoutFeedback>
          </View>
        </TouchableWithoutFeedback>
      </Modal>
    );
  };
  CircleProjectScreen = () => {
    const { loading, circleData = [], error } = this.props.circle;
    return loading ? (
      error ? (
        <NothingHere
          text="Nothing Here! Comeback later 👋"
          image={IMAGES.NoPending}
        />
      ) : (
        this.OngoingLoader()
      )
    ) : (
      <ScrollView
        showsVerticalScrollIndicator={false}
        style={{ marginBottom: RFValue(170, 844) }}
      >
        {!this.state.searchText ? (
          <TouchableWithoutFeedback
            onPress={this.handleInnerToggleSwitchArchived}
          >
            {this.renderInnerToggle(["My Circle", "Pending", "Sent"])}
          </TouchableWithoutFeedback>
        ) : null}
        {circleData && circleData?.length > 0 ? (
          circleData?.map((value, index) => {
            return (
              <UserCard
                onPress={() => {
                  this.handleDeleteCircleRequest(value.id);
                  this.setState({
                    // showUncircleModal: true,
                    deleteId: value.id,
                  });
                }}
                // onPress={() => {
                //   this.props.navigation.navigate(
                //     !value?.isCreator ? "BrandProfile" : "CreatorProfile",
                //     {
                //       selfView: false,
                //       userId: value.id,
                //     }
                //   );
                // }}
                circle={this.state.isChatActive}
                image={value.profileImageUrl}
                onPressCross={() => {
                  this.handleDeleteCircleRequest(value.id);
                }}
                onPressCheck={() => this.handleAcceptCircle(value)}
                isAdmin={!value?.isCreator}
                // isAdmin={index % 2 === 0}
                userData={value}
                key={index}
                isSaved={this.checkIsSaved(value)}
                onPressSaved={() => this.handleIsSavedClicked(value)}
              />
            );
          })
        ) : (
          <NothingHere
            text="Nothing Here! Comeback later 👋"
            image={IMAGES.NoPending}
          />
        )}
      </ScrollView>
      //   <ComingSoonCard
      //   image={IMAGES.circle}
      //   title="Your Circles"
      //   line1="Add people to your Circles"
      //   line2="Directly chat with people in your circle."
      // />
    );
  };
  handleFilter = async (event) => {
    this.setState({ searchText: event });
    const { activeTab } = this.state;
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    if (activeTab === 1) {
      this.props.callprojectApi(userId, tokenDetail, "PENDING", event);
    }
    if (activeTab === 2) {
      this.props.callprojectApi(userId, tokenDetail, "SENT", event);
    }
    if (activeTab === 0) {
      this.props.callprojectApi(
        userId,
        tokenDetail,
        ENUM.ONGOING,
        this.state.searchText
      );
    }
    if (activeTab === 3) {
      const requestParam = {
        id: userId,
        key: this.state.searchText,
      };
      this.props.getCircleSearchApi(requestParam, tokenDetail);
    }
  };
  searchProject = async () => {
    const { activeTab } = this.state;
    const userId = await AsyncStorage.getItem(STORAGE_KEY.USER_ID);
    const tokenDetail = await AsyncStorage.getItem(STORAGE_KEY.ACCESS_TOKEN);
    if (activeTab === 1) {
      this.props.callprojectApi(
        userId,
        tokenDetail,
        "PENDING",
        this.state.searchText
      );
    }
    if (activeTab === 2) {
      this.props.callprojectApi(
        userId,
        tokenDetail,
        "SENT",
        this.state.searchText
      );
    }
  };
  renderInput = () => {
    const { activeTab } = this.state;
    return (
      <SearchBarWithFilter
        enableInput={true}
        onChangeText={this.handleFilter}
        returnKeyType="search"
        onSubmitEditing={this.searchProject}
      />
    );
    // activeTab === 0 ? (
    //   <SearchBarWithFilter
    //     onPress={() => {
    //       this.props.navigation.navigate("Search");
    //     }}
    //   />
    // ) :
  };
  renderCategoryTab = () => {
    return (
      <View style={styles.categoryTab}>
        {this.state.categories?.map((value, index) => {
          return (
            <TouchableWithoutFeedback
              onPress={() => this.handleChangeToggle(value)}
            >
              <View
                key={index}
                style={[
                  styles.categorybutton,
                  {
                    shadowOpacity:
                      this.state.activeTab == value.value ? 0.1 : 0,
                    backgroundColor:
                      this.state.activeTab == value.value
                        ? COLORS.primaryTeal500
                        : COLORS.monoWhite900,
                    flexDirection: "row",
                    alignItems: "center",
                    justifyContent: "center",
                  },
                ]}
              >
                {index % 2 == 1 && this.state.activeTab != value.value && (
                  <View
                    style={{
                      marginRight: 6,
                      marginBottom: 2,
                      width: 6,
                      height: 6,
                      borderRadius: 4,
                      backgroundColor: COLORS.teritiaryWarning,
                    }}
                  ></View>
                )}
                <Text
                  style={[
                    styles.categoryText,
                    {
                      color:
                        this.state.activeTab == value.value
                          ? COLORS.monoWhite900
                          : COLORS.monoBlack500,
                    },
                  ]}
                >
                  {value.title}
                </Text>
              </View>
            </TouchableWithoutFeedback>
          );
        })}
      </View>
    );
  };
  renderCircleRequestCard = () => {
    return (
      <TouchableWithoutFeedback
        onPress={() => {
          this.setState({
            circleRequestVisible: !this.state.circleRequestVisible,
          });
        }}
      >
        <View style={styles.requestCard}>
          <View style={styles.cardTextWrapper}>
            <Text style={styles.requestCardText}>
              {this.state.circleRequestVisible ? "Circle" : "Circle Request"}
            </Text>

            {this.state.circleRequestVisible ? null : (
              <View style={styles.chatNumber}>
                <Text
                  style={{
                    color: COLORS.monoWhite900,
                    fontSize: RFValue(12, 844),
                  }}
                >
                  4
                </Text>
              </View>
            )}
          </View>
          <Icon
            name={
              this.state.circleRequestVisible ? "chevron-left" : "chevron-right"
            }
            type="feather"
            size={20}
            color={COLORS.monoBlack900}
          />
        </View>
      </TouchableWithoutFeedback>
    );
  };
  renderTabs = () => {
    const { activeTab } = this.state;
    return (
      <View
        style={{
          marginTop: 16,
          paddingHorizontal: activeTab === 0 ? 0 : RFValue(16, 844),
        }}
      >
        {activeTab === 0 && this.OngoingProjectScreen()}
        {activeTab === 1 && this.PendingProjectScreen()}
        {activeTab === 2 && this.SentProjectScreen()}
        {activeTab === 3 && this.CircleProjectScreen()}
      </View>
    );
  };
  render() {
    const { acceptResponse = [], acceptSuccess } = this.props.circle;
    const { accepterror, accepterrorMsg, withdrawerror, withdrawerrorMsg } =
      this.props.projectAction;
    return (
      <BottomSheetModalProvider>
        {accepterror && (
          <SnackBar
            visible={accepterror || withdrawerror}
            onDismiss={() => {
              this.props.callAcceptProjectResetReducer();
            }}
            text={accepterrorMsg || withdrawerrorMsg}
          />
        )}
        <View style={{ justifyContent: "flex-end" }}>
          {this.renderWithdrawModal()}
          {this.uncircleModal()}
          <View style={styles.wrapper}>
            <View style={{ paddingHorizontal: RFValue(16, 844) }}>
              <Header />
              <View style={{ zIndex: 1 }}>{this.renderInput()}</View>
              {this.renderCategoryTab()}
            </View>
            {this.renderTabs()}
          </View>
          <BottomNavBar activeTab="Projects" />
        </View>
      </BottomSheetModalProvider>
      // <ChatRoom/>
    );
  }
}
const mapStateToProps = (state) => {
  const { projects, projectAction, circle, saved } = state;
  return { projects, projectAction, circle, saved };
};

const mapDispatchToProps = (dispatch) => {
  return {
    callprojectApi: (userId, tokenDetail, listType, name) => {
      dispatch({
        type: projectTypes.GET_PROJECT_LIST,
        userId,
        tokenDetail,
        listType,
        name,
      });
    },
    callApitoAcceptProject: (userId, tokenDetail, senderUserId, projectId) => {
      dispatch({
        type: projectActionTypes.ACCEPT_PROJECT,
        userId,
        tokenDetail,
        senderUserId,
        projectId,
      });
    },
    callApitoRejectProject: (
      userId,
      tokenDetail,
      senderUserId,
      projectId,
      isReject
    ) => {
      dispatch({
        type: projectActionTypes.ACCEPT_PROJECT,
        userId,
        tokenDetail,
        senderUserId,
        projectId,
        isReject,
      });
    },
    callApitoWithdrawProject: (userId, tokenDetail, projectId) => {
      dispatch({
        type: projectActionTypes.WITHDRAW_PROJECT,
        userId,
        tokenDetail,
        projectId,
      });
    },
    callAcceptProjectResetReducer: () => {
      dispatch({ type: projectActionTypes.RESET_ACCEPT_PROJECT });
    },
    getCircleApi: (requestParam, tokenDetail) => {
      dispatch({
        type: circleTypes.GET_CIRCLE_DATA,
        requestParam,
        tokenDetail,
      });
    },
    getCircleSearchApi: (requestParam, tokenDetail, searchText) => {
      dispatch({
        type: circleTypes.GET_CIRCLE_SEARCH_DATA,
        requestParam,
        tokenDetail,
        searchText,
      });
    },
    deleteCircleApi: (requestParam, tokenDetail) => {
      dispatch({
        type: circleTypes.DELETE_CIRCLE_DATA,
        requestParam,
        tokenDetail,
      });
    },
    setSavedArray: (savedData) => {
      dispatch({ type: savedTypes.SET_USER_SAVED_REDUCER, savedData });
    },
    resetSuccess: () => {
      dispatch({
        type: circleTypes.RESET_SUCCESS,
      });
    },
    acceptCircleApi: (requestParam, tokenDetail) => {
      dispatch({
        type: circleTypes.ACCEPT_CIRCLE_DATA,
        requestParam,
        tokenDetail,
      });
    },
  };
};
export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withNavigation(Projects));
